<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mettiriolo&#39;s Blog</title>
  
  <subtitle>Just Write</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mettiriolo.github.io/"/>
  <updated>2019-10-22T06:19:55.877Z</updated>
  <id>https://mettiriolo.github.io/</id>
  
  <author>
    <name>Mettiriolo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>决心</title>
    <link href="https://mettiriolo.github.io/2019/10/21/%E4%B8%8B%E5%86%B3%E5%BF%83/"/>
    <id>https://mettiriolo.github.io/2019/10/21/下决心/</id>
    <published>2019-10-21T01:37:04.000Z</published>
    <updated>2019-10-22T06:19:55.877Z</updated>
    
    <content type="html"><![CDATA[<p>有一个游戏打得好的朋友问我，我现在学习成绩也不行，又没有别的特长，去做职业选手怎么样，又能打游戏又能赚钱养活自己？我不置可否，因为他能问我，说明他自己也觉得不靠谱。</p><p>为什么要下决心呢？下了决心，就不能轻易反悔，就要坚定不移的，为一个目标努力。<a id="more"></a> 实际上只要这个目标有足够的吸引力，还是可以轻易下定决心的。 有一个叫”期望强度”的心理学概念，指的是人们在实现自己期望达成预定目标的过程中， 面对各种付出和挑战所能承受的心理限度，或者说期望的牢固程度。如果一个人的期望强度太脆弱，将无法面对残酷的现实或自身的缺点的挑战而半途而废。只有那些一定要成功的人，他们因有足够牢固的期望强度，所以能排除万难，坚持到底，永不放弃，直到成功。也就是说，期望强度越大，下定决心就越容易。</p><p>有一位年轻人，想向大哲学家苏格拉底求学。有一天，苏格拉底将他带到一条小河边，“扑通”一下，苏格拉底就跳到河里去了。年轻人一脸迷茫：难道大师要教我游泳？看到大师在向自己招手，年轻人也就稀里糊涂跳进河里。没想到，当他一跳下来，苏格拉底立即用力将他的脑袋按进水里。年轻人用力挣扎，刚一出水面，苏格拉底再次用更大的力将他的脑袋按进水里。年轻人拼命挣扎，刚一出水面，还来不及喘气，没想到苏格拉底第三次死死地将他的脑袋按进水里……年轻人本能地用尽全身力气再次拼命挣扎出来，他本能地拼命往岸上跑，爬上了岸，他指着还在水里的苏格拉底说：“大，大师，你到底想干什么？”没想到苏格拉底理都没理他，爬上岸像没事一样就走了。年轻人追上苏格拉底，虔诚地说：“大师，恕我愚昧，刚才的一切我还未明白，请指点一二。”此时苏格拉底似乎觉得年轻人尚有教的可能性，于是站定下来，对他讲了一句著名的话：“年轻人，如果你想向我学知识的话，你就必须有强烈的求知欲望，就像你有强烈的求生欲望一样。”能不能下定决心来‎‎源于你是‎想要‎，还‎是一‎定要‎。如‎果仅‎仅是‎想要‎，可‎能我‎们‎就会犹豫不决，踌躇不前。‎如果‎是一‎定要‎，那‎就会果断地作出决定。‎1‎00%的意‎愿，‎决定‎我‎们有‎100%‎的信心，‎‎决定我们对此的决心。‎10‎0‎%的意愿‎，决‎定我‎‎们一定会‎采取‎10‎0‎%的行动‎，因‎为第‎九十‎九步‎放弃‎，恰‎恰反‎证我‎们仅‎仅是‎‎想要，我‎不是‎一定‎要，‎即不‎是真‎正的‎10‎0%‎的愿意‎。‎100‎%的意‎‎愿，10‎0%‎的‎期望强度‎，就有100%的信心，100%的决心。</p><p>当不能下定决心的时候，就要问自己，这一切真的是我想要的吗？如果心理上已经感到不安，那么这种决心放弃也罢。与其怀着矛盾的心理勉强自己去下定决心，还不如分清轻重缓急，该干什么干什么。毕竟下决心不是做决定，只是一个过渡。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个游戏打得好的朋友问我，我现在学习成绩也不行，又没有别的特长，去做职业选手怎么样，又能打游戏又能赚钱养活自己？我不置可否，因为他能问我，说明他自己也觉得不靠谱。&lt;/p&gt;
&lt;p&gt;为什么要下决心呢？下了决心，就不能轻易反悔，就要坚定不移的，为一个目标努力。
    
    </summary>
    
    
      <category term="literature" scheme="https://mettiriolo.github.io/categories/literature/"/>
    
      <category term="Soul Soother" scheme="https://mettiriolo.github.io/categories/literature/Soul-Soother/"/>
    
    
      <category term="essay" scheme="https://mettiriolo.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>Redis的安装与配置</title>
    <link href="https://mettiriolo.github.io/2019/10/21/Redis%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://mettiriolo.github.io/2019/10/21/Redis的安装与配置/</id>
    <published>2019-10-20T16:33:32.000Z</published>
    <updated>2019-10-22T06:19:24.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装gcc"><a href="#1-安装gcc" class="headerlink" title="1.安装gcc"></a>1.安装gcc</h2><p><code>yum -y install automake autoconf libtool make</code></p><p><strong>注意：</strong>运行yum时出现/var/run/yum.pid已被锁定，PID为xxx的另一个程序正在运行的问题解决<a id="more"></a> </p><p><code>m -f /var/run/yum.pid</code></p><h2 id="2-安装Redis"><a href="#2-安装Redis" class="headerlink" title="2.安装Redis"></a>2.安装Redis</h2><p><em>官网安装教程<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></em></p><p>下载、解压缩和编译Redis：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http:<span class="comment">//download.redis.io/releases/redis-5.0.5.tar.gz</span></span><br><span class="line">$ tar xzf redis<span class="number">-5.0</span><span class="number">.5</span>.tar.gz</span><br><span class="line">$ cd redis<span class="number">-5.0</span><span class="number">.5</span></span><br><span class="line">$ make PREFIX=/opt/redis install</span><br></pre></td></tr></table></figure><p>运行Redis：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./redis-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>您可以使用内置客户端与Redis交互：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> ./redis-cli</span><br><span class="line">redis&gt; <span class="keyword">set</span> foo <span class="comment">bar</span></span><br><span class="line">OK</span><br><span class="line">redis&gt; get <span class="comment">foo</span></span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure><p>退出客户端：ctrl+c 退出后redis不会关闭 </p><p>输入命令<code>ps -ef | grep -i redis</code>查看redis状态</p><p><img src="C:%5CUsers%5Cfan%5CPictures%5C%E6%8D%95%E8%8E%B75.PNG" alt=""></p><ul><li>第一种关闭方式</li></ul><p>关闭命令：<code>./redis-cli shutdown</code></p><ul><li>第二种关闭方式(断电，非正常方式。容易造成数据丢失)</li></ul><p>查询pid <code>ps -ef |grep -i redis</code></p><p><code>kill -9 PID</code></p><h2 id="3-配制redis-conf"><a href="#3-配制redis-conf" class="headerlink" title="3.配制redis.conf"></a>3.配制redis.conf</h2><p>在redis解压目录下找到redis.conf文件，复制到redis目录</p><p><code>cp redis.conf /opt/redis</code></p><p>主要修改参数</p><ol><li><p>daemonize no    <strong><em>改为yes</em></strong></p></li><li><p>bind 127.0.0.1    <strong><em>注释掉</em></strong></p></li><li><p>requirepass foobared  <strong><em>设置密码</em></strong></p></li></ol><p><strong>参数说明：<a href="https://www.redis.net.cn/tutorial/3504.html" target="_blank" rel="noopener">https://www.redis.net.cn/tutorial/3504.html</a></strong></p><p>redis.conf 配置项说明如下：</p><ol><li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</li></ol><p>​    <strong>daemonize no</strong>    <strong><em>改为yes</em></strong></p><ol start="2"><li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</li></ol><p>​    <strong>pidfile /var/run/redis.pid</strong></p><ol start="3"><li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</li></ol><p>​    <strong>port 6379</strong></p><ol start="4"><li>绑定的主机地址</li></ol><p>​    <strong>bind 127.0.0.1</strong>    <strong><em>注释掉</em></strong></p><ol start="5"><li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</li></ol><p>​    <strong>timeout 300</strong></p><ol start="6"><li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</li></ol><p>​    <strong>loglevel verbose</strong></p><ol start="7"><li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</li></ol><p>​    <strong>logfile stdout</strong></p><ol start="8"><li>设置数据库的数量，默认数据库为0，可以使用SELECT <code>&lt;dbid&gt;</code>命令在连接上指定数据库id</li></ol><p>​    <strong>databases 16</strong></p><ol start="9"><li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</li></ol><p>​    <strong>save <seconds> <changes></strong></p><p>​    Redis默认配置文件中提供了三个条件：</p><p>​    <strong>save 900 1</strong></p><p>​    <strong>save 300 10</strong></p><p>​    <strong>save 60 10000</strong></p><p>​    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p><ol start="10"><li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</li></ol><p>​    <strong>rdbcompression yes</strong></p><ol start="11"><li>指定本地数据库文件名，默认值为dump.rdb</li></ol><p>​    <strong>dbfilename dump.rdb</strong></p><ol start="12"><li>指定本地数据库存放目录</li></ol><p>​    <strong>dir ./</strong>    <em>当前目录</em></p><ol start="13"><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</li></ol><p>​    <strong>slaveof <masterip> <masterport></strong></p><ol start="14"><li>当master服务设置了密码保护时，slav服务连接master的密码</li></ol><p>​    <strong>masterauth <master-password></strong></p><ol start="15"><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <code>&lt;password&gt;</code>命令提供密码，默认关闭</li></ol><p>​    <strong>requirepass foobared</strong>   <strong><em>设置密码</em></strong></p><ol start="16"><li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</li></ol><p>​    <strong>maxclients 128</strong></p><ol start="17"><li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</li></ol><p>​    <strong>maxmemory <bytes></strong></p><ol start="18"><li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</li></ol><p>​    <strong>appendonly no</strong></p><ol start="19"><li>指定更新日志文件名，默认为appendonly.aof</li></ol><p>​     <strong>appendfilename appendonly.aof</strong></p><ol start="20"><li>指定更新日志条件，共有3个可选值：     <strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）     <strong>always</strong>：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）     <strong>everysec</strong>：表示每秒同步一次（折衷，默认值）</li></ol><p>​    <strong>appendfsync everysec</strong></p><ol start="21"><li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</li></ol><p>​     <strong>vm-enabled no</strong></p><ol start="22"><li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</li></ol><p>​     <strong>vm-swap-file /tmp/redis.swap</strong></p><ol start="23"><li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</li></ol><p>​     <strong>vm-max-memory 0</strong></p><ol start="24"><li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</li></ol><p>​     <strong>vm-page-size 32</strong></p><ol start="25"><li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</li></ol><p>​     <strong>vm-pages 134217728</strong></p><ol start="26"><li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</li></ol><p>​     <strong>vm-max-threads 4</strong></p><ol start="27"><li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</li></ol><p>​    <strong>glueoutputbuf yes</strong></p><ol start="28"><li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</li></ol><p>​    <strong>hash-max-zipmap-entries 64</strong></p><p>​    <strong>hash-max-zipmap-value 512</strong></p><ol start="29"><li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</li></ol><p>​    <strong>activerehashing yes</strong></p><ol start="30"><li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</li></ol><p>​    <strong>include /path/to/local.conf</strong></p><p><strong>redis中的内存维护策略</strong></p><p><strong>一是为数据设置超时时间</strong>，</p><p>设定内存空间，建议不要超过1G  256~512M</p><p><strong>二是采用LRU算法动态将不用的数据删除</strong>。内存管理的一种页面置换算法，对于在内存中但又不用的数据块（内存块）叫做LRU，操作系统会根据哪些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。</p><ol><li><p>volatile-lru：设定超时时间的数据中,删除最不常使用的数据.</p></li><li><p>allkeys-lru：查询所有的key中最近最不常使用的数据进行删除，这是应用最广泛的策略.</p></li><li><p>volatile-random：在已经设定了超时的数据中随机删除.</p></li><li><p>allkeys-random：查询所有的key,之后随机删除.</p></li><li><p>volatile-ttl：查询全部设定超时时间的数据,之后排序,将马上将要过期的数据进行删除操作.</p></li><li><p>noeviction：如果设置为该属性,则不会进行删除操作,如果内存溢出则报错返回.</p></li></ol><ul><li><p>volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键</p></li><li><p>allkeys-lfu：从所有键中驱逐使用频率最少的键</p></li></ul><p>参考文档：<a href="https://www.jianshu.com/p/c8aeb3eee6bc" target="_blank" rel="noopener">https://www.jianshu.com/p/c8aeb3eee6bc</a></p><p> <strong><em>vim命令</em></strong></p><p><code>:w</code> 保存但不退出</p><p><code>:wq</code> 保存并退出</p><p><code>:q</code> 退出</p><p><code>:q!</code> 强制退出，不保存</p><p><code>:e!</code> 放弃所有修改，从上次保存文件开始再编辑命令历史 </p><h3 id="3-1带配置文件启动redis-server"><a href="#3-1带配置文件启动redis-server" class="headerlink" title="3.1带配置文件启动redis-server"></a>3.1带配置文件启动redis-server</h3><p><code>./bin/redis-server ./redis.conf</code></p><p><img src="C:%5CUsers%5Cfan%5CPictures%5C%E6%8D%95%E8%8E%B76.PNG" alt=""></p><h3 id="3-2客户端启动"><a href="#3-2客户端启动" class="headerlink" title="3.2客户端启动"></a>3.2客户端启动</h3><h4 id="本地客户端登录"><a href="#本地客户端登录" class="headerlink" title="本地客户端登录"></a>本地客户端登录</h4><p><code>redis-cli -a  password</code></p><h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><p><code>redis-cli -h host -p port -a password</code></p><p>–h IP地址 –p 端口 –a 密码 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装gcc&quot;&gt;&lt;a href=&quot;#1-安装gcc&quot; class=&quot;headerlink&quot; title=&quot;1.安装gcc&quot;&gt;&lt;/a&gt;1.安装gcc&lt;/h2&gt;&lt;p&gt;&lt;code&gt;yum -y install automake autoconf libtool make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;运行yum时出现/var/run/yum.pid已被锁定，PID为xxx的另一个程序正在运行的问题解决
    
    </summary>
    
    
      <category term="Development" scheme="https://mettiriolo.github.io/categories/Development/"/>
    
      <category term="Database" scheme="https://mettiriolo.github.io/categories/Development/Database/"/>
    
    
      <category term="Redis" scheme="https://mettiriolo.github.io/tags/Redis/"/>
    
      <category term="数据库" scheme="https://mettiriolo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="https://mettiriolo.github.io/tags/NoSQL/"/>
    
  </entry>
  
</feed>
